// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nc.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_nc_2eproto__INCLUDED
#define GRPC_nc_2eproto__INCLUDED

#include "nc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace nc {

class NCService final {
 public:
  static constexpr char const* service_full_name() {
    return "nc.NCService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::nc::AggValuesPerLonReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::AggValuesPerLonReply>> AsyncGetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::AggValuesPerLonReply>>(AsyncGetAggValuesPerLonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::AggValuesPerLonReply>> PrepareAsyncGetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::AggValuesPerLonReply>>(PrepareAsyncGetAggValuesPerLonRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::nc::MeshReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::MeshReply>> AsyncGetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::MeshReply>>(AsyncGetMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::MeshReply>> PrepareAsyncGetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::MeshReply>>(PrepareAsyncGetMeshRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::nc::TrisReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>> AsyncGetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>>(AsyncGetTrisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>> PrepareAsyncGetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>>(PrepareAsyncGetTrisRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::nc::TrisReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>> AsyncGetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>>(AsyncGetTrisAggRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>> PrepareAsyncGetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>>(PrepareAsyncGetTrisAggRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::AggValuesPerLonReply>* AsyncGetAggValuesPerLonRaw(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::AggValuesPerLonReply>* PrepareAsyncGetAggValuesPerLonRaw(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::MeshReply>* AsyncGetMeshRaw(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::MeshReply>* PrepareAsyncGetMeshRaw(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>* AsyncGetTrisRaw(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>* PrepareAsyncGetTrisRaw(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>* AsyncGetTrisAggRaw(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nc::TrisReply>* PrepareAsyncGetTrisAggRaw(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::nc::AggValuesPerLonReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>> AsyncGetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>>(AsyncGetAggValuesPerLonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>> PrepareAsyncGetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>>(PrepareAsyncGetAggValuesPerLonRaw(context, request, cq));
    }
    ::grpc::Status GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::nc::MeshReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::MeshReply>> AsyncGetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::MeshReply>>(AsyncGetMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::MeshReply>> PrepareAsyncGetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::MeshReply>>(PrepareAsyncGetMeshRaw(context, request, cq));
    }
    ::grpc::Status GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::nc::TrisReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>> AsyncGetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>>(AsyncGetTrisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>> PrepareAsyncGetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>>(PrepareAsyncGetTrisRaw(context, request, cq));
    }
    ::grpc::Status GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::nc::TrisReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>> AsyncGetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>>(AsyncGetTrisAggRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>> PrepareAsyncGetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>>(PrepareAsyncGetTrisAggRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, std::function<void(::grpc::Status)>) override;
      void GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, std::function<void(::grpc::Status)>) override;
      void GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) override;
      void GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) override;
      void GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>* AsyncGetAggValuesPerLonRaw(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>* PrepareAsyncGetAggValuesPerLonRaw(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::MeshReply>* AsyncGetMeshRaw(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::MeshReply>* PrepareAsyncGetMeshRaw(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* AsyncGetTrisRaw(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* PrepareAsyncGetTrisRaw(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* AsyncGetTrisAggRaw(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* PrepareAsyncGetTrisAggRaw(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAggValuesPerLon_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMesh_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTris_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTrisAgg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response);
    virtual ::grpc::Status GetMesh(::grpc::ServerContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response);
    virtual ::grpc::Status GetTris(::grpc::ServerContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response);
    virtual ::grpc::Status GetTrisAgg(::grpc::ServerContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAggValuesPerLon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAggValuesPerLon() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAggValuesPerLon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAggValuesPerLon(::grpc::ServerContext* context, ::nc::AggValuesPerLonRequest* request, ::grpc::ServerAsyncResponseWriter< ::nc::AggValuesPerLonReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMesh() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMesh(::grpc::ServerContext* context, ::nc::MeshRequest* request, ::grpc::ServerAsyncResponseWriter< ::nc::MeshReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTris : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTris() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTris() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTris(::grpc::ServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTris(::grpc::ServerContext* context, ::nc::TrisRequest* request, ::grpc::ServerAsyncResponseWriter< ::nc::TrisReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTrisAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTrisAgg() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTrisAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrisAgg(::grpc::ServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrisAgg(::grpc::ServerContext* context, ::nc::TrisAggRequest* request, ::grpc::ServerAsyncResponseWriter< ::nc::TrisReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAggValuesPerLon<WithAsyncMethod_GetMesh<WithAsyncMethod_GetTris<WithAsyncMethod_GetTrisAgg<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAggValuesPerLon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAggValuesPerLon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::nc::AggValuesPerLonRequest, ::nc::AggValuesPerLonReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response) { return this->GetAggValuesPerLon(context, request, response); }));}
    void SetMessageAllocatorFor_GetAggValuesPerLon(
        ::grpc::experimental::MessageAllocator< ::nc::AggValuesPerLonRequest, ::nc::AggValuesPerLonReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nc::AggValuesPerLonRequest, ::nc::AggValuesPerLonReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAggValuesPerLon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAggValuesPerLon(
      ::grpc::CallbackServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAggValuesPerLon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMesh() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::nc::MeshRequest, ::nc::MeshReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::nc::MeshRequest* request, ::nc::MeshReply* response) { return this->GetMesh(context, request, response); }));}
    void SetMessageAllocatorFor_GetMesh(
        ::grpc::experimental::MessageAllocator< ::nc::MeshRequest, ::nc::MeshReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nc::MeshRequest, ::nc::MeshReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMesh(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTris : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTris() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::nc::TrisRequest, ::nc::TrisReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::nc::TrisRequest* request, ::nc::TrisReply* response) { return this->GetTris(context, request, response); }));}
    void SetMessageAllocatorFor_GetTris(
        ::grpc::experimental::MessageAllocator< ::nc::TrisRequest, ::nc::TrisReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nc::TrisRequest, ::nc::TrisReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTris() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTris(::grpc::ServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTris(
      ::grpc::CallbackServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTris(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTrisAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTrisAgg() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::nc::TrisAggRequest, ::nc::TrisReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response) { return this->GetTrisAgg(context, request, response); }));}
    void SetMessageAllocatorFor_GetTrisAgg(
        ::grpc::experimental::MessageAllocator< ::nc::TrisAggRequest, ::nc::TrisReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::nc::TrisAggRequest, ::nc::TrisReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTrisAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrisAgg(::grpc::ServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTrisAgg(
      ::grpc::CallbackServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTrisAgg(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetAggValuesPerLon<ExperimentalWithCallbackMethod_GetMesh<ExperimentalWithCallbackMethod_GetTris<ExperimentalWithCallbackMethod_GetTrisAgg<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetAggValuesPerLon<ExperimentalWithCallbackMethod_GetMesh<ExperimentalWithCallbackMethod_GetTris<ExperimentalWithCallbackMethod_GetTrisAgg<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAggValuesPerLon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAggValuesPerLon() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAggValuesPerLon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMesh() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTris : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTris() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTris() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTris(::grpc::ServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTrisAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTrisAgg() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTrisAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrisAgg(::grpc::ServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAggValuesPerLon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAggValuesPerLon() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAggValuesPerLon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAggValuesPerLon(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMesh() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMesh(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTris : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTris() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTris() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTris(::grpc::ServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTris(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTrisAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTrisAgg() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTrisAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrisAgg(::grpc::ServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrisAgg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAggValuesPerLon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAggValuesPerLon() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAggValuesPerLon(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAggValuesPerLon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAggValuesPerLon(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAggValuesPerLon(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMesh() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMesh(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMesh(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTris : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTris() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTris(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTris() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTris(::grpc::ServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTris(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTris(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTrisAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTrisAgg() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTrisAgg(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTrisAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrisAgg(::grpc::ServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTrisAgg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTrisAgg(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAggValuesPerLon : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAggValuesPerLon() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nc::AggValuesPerLonRequest, ::nc::AggValuesPerLonReply>(std::bind(&WithStreamedUnaryMethod_GetAggValuesPerLon<BaseClass>::StreamedGetAggValuesPerLon, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAggValuesPerLon() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAggValuesPerLon(::grpc::ServerContext* /*context*/, const ::nc::AggValuesPerLonRequest* /*request*/, ::nc::AggValuesPerLonReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAggValuesPerLon(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nc::AggValuesPerLonRequest,::nc::AggValuesPerLonReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMesh() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::nc::MeshRequest, ::nc::MeshReply>(std::bind(&WithStreamedUnaryMethod_GetMesh<BaseClass>::StreamedGetMesh, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMesh(::grpc::ServerContext* /*context*/, const ::nc::MeshRequest* /*request*/, ::nc::MeshReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMesh(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nc::MeshRequest,::nc::MeshReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTris : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTris() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nc::TrisRequest, ::nc::TrisReply>(std::bind(&WithStreamedUnaryMethod_GetTris<BaseClass>::StreamedGetTris, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTris() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTris(::grpc::ServerContext* /*context*/, const ::nc::TrisRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTris(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nc::TrisRequest,::nc::TrisReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTrisAgg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTrisAgg() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::nc::TrisAggRequest, ::nc::TrisReply>(std::bind(&WithStreamedUnaryMethod_GetTrisAgg<BaseClass>::StreamedGetTrisAgg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTrisAgg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTrisAgg(::grpc::ServerContext* /*context*/, const ::nc::TrisAggRequest* /*request*/, ::nc::TrisReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTrisAgg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nc::TrisAggRequest,::nc::TrisReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAggValuesPerLon<WithStreamedUnaryMethod_GetMesh<WithStreamedUnaryMethod_GetTris<WithStreamedUnaryMethod_GetTrisAgg<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAggValuesPerLon<WithStreamedUnaryMethod_GetMesh<WithStreamedUnaryMethod_GetTris<WithStreamedUnaryMethod_GetTrisAgg<Service > > > > StreamedService;
};

}  // namespace nc


#endif  // GRPC_nc_2eproto__INCLUDED
