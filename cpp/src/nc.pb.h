// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nc_2eproto;
namespace nc {
class AggValuesPerLonReply;
class AggValuesPerLonReplyDefaultTypeInternal;
extern AggValuesPerLonReplyDefaultTypeInternal _AggValuesPerLonReply_default_instance_;
class AggValuesPerLonRequest;
class AggValuesPerLonRequestDefaultTypeInternal;
extern AggValuesPerLonRequestDefaultTypeInternal _AggValuesPerLonRequest_default_instance_;
class MeshReply;
class MeshReplyDefaultTypeInternal;
extern MeshReplyDefaultTypeInternal _MeshReply_default_instance_;
class MeshRequest;
class MeshRequestDefaultTypeInternal;
extern MeshRequestDefaultTypeInternal _MeshRequest_default_instance_;
class TrisAggRequest;
class TrisAggRequestDefaultTypeInternal;
extern TrisAggRequestDefaultTypeInternal _TrisAggRequest_default_instance_;
class TrisReply;
class TrisReplyDefaultTypeInternal;
extern TrisReplyDefaultTypeInternal _TrisReply_default_instance_;
class TrisRequest;
class TrisRequestDefaultTypeInternal;
extern TrisRequestDefaultTypeInternal _TrisRequest_default_instance_;
}  // namespace nc
PROTOBUF_NAMESPACE_OPEN
template<> ::nc::AggValuesPerLonReply* Arena::CreateMaybeMessage<::nc::AggValuesPerLonReply>(Arena*);
template<> ::nc::AggValuesPerLonRequest* Arena::CreateMaybeMessage<::nc::AggValuesPerLonRequest>(Arena*);
template<> ::nc::MeshReply* Arena::CreateMaybeMessage<::nc::MeshReply>(Arena*);
template<> ::nc::MeshRequest* Arena::CreateMaybeMessage<::nc::MeshRequest>(Arena*);
template<> ::nc::TrisAggRequest* Arena::CreateMaybeMessage<::nc::TrisAggRequest>(Arena*);
template<> ::nc::TrisReply* Arena::CreateMaybeMessage<::nc::TrisReply>(Arena*);
template<> ::nc::TrisRequest* Arena::CreateMaybeMessage<::nc::TrisRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nc {

enum AggValuesPerLonRequest_DOM : int {
  AggValuesPerLonRequest_DOM_DOM01 = 0,
  AggValuesPerLonRequest_DOM_DOM02 = 1,
  AggValuesPerLonRequest_DOM_AggValuesPerLonRequest_DOM_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggValuesPerLonRequest_DOM_AggValuesPerLonRequest_DOM_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggValuesPerLonRequest_DOM_IsValid(int value);
constexpr AggValuesPerLonRequest_DOM AggValuesPerLonRequest_DOM_DOM_MIN = AggValuesPerLonRequest_DOM_DOM01;
constexpr AggValuesPerLonRequest_DOM AggValuesPerLonRequest_DOM_DOM_MAX = AggValuesPerLonRequest_DOM_DOM02;
constexpr int AggValuesPerLonRequest_DOM_DOM_ARRAYSIZE = AggValuesPerLonRequest_DOM_DOM_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggValuesPerLonRequest_DOM_descriptor();
template<typename T>
inline const std::string& AggValuesPerLonRequest_DOM_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggValuesPerLonRequest_DOM>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggValuesPerLonRequest_DOM_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggValuesPerLonRequest_DOM_descriptor(), enum_t_value);
}
inline bool AggValuesPerLonRequest_DOM_Parse(
    const std::string& name, AggValuesPerLonRequest_DOM* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggValuesPerLonRequest_DOM>(
    AggValuesPerLonRequest_DOM_descriptor(), name, value);
}
enum AggValuesPerLonRequest_Op : int {
  AggValuesPerLonRequest_Op_MEAN = 0,
  AggValuesPerLonRequest_Op_SUM = 1,
  AggValuesPerLonRequest_Op_AggValuesPerLonRequest_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggValuesPerLonRequest_Op_AggValuesPerLonRequest_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggValuesPerLonRequest_Op_IsValid(int value);
constexpr AggValuesPerLonRequest_Op AggValuesPerLonRequest_Op_Op_MIN = AggValuesPerLonRequest_Op_MEAN;
constexpr AggValuesPerLonRequest_Op AggValuesPerLonRequest_Op_Op_MAX = AggValuesPerLonRequest_Op_SUM;
constexpr int AggValuesPerLonRequest_Op_Op_ARRAYSIZE = AggValuesPerLonRequest_Op_Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggValuesPerLonRequest_Op_descriptor();
template<typename T>
inline const std::string& AggValuesPerLonRequest_Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggValuesPerLonRequest_Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggValuesPerLonRequest_Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggValuesPerLonRequest_Op_descriptor(), enum_t_value);
}
inline bool AggValuesPerLonRequest_Op_Parse(
    const std::string& name, AggValuesPerLonRequest_Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggValuesPerLonRequest_Op>(
    AggValuesPerLonRequest_Op_descriptor(), name, value);
}
enum TrisAggRequest_Op : int {
  TrisAggRequest_Op_MEAN = 0,
  TrisAggRequest_Op_SUM = 1,
  TrisAggRequest_Op_TrisAggRequest_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrisAggRequest_Op_TrisAggRequest_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrisAggRequest_Op_IsValid(int value);
constexpr TrisAggRequest_Op TrisAggRequest_Op_Op_MIN = TrisAggRequest_Op_MEAN;
constexpr TrisAggRequest_Op TrisAggRequest_Op_Op_MAX = TrisAggRequest_Op_SUM;
constexpr int TrisAggRequest_Op_Op_ARRAYSIZE = TrisAggRequest_Op_Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrisAggRequest_Op_descriptor();
template<typename T>
inline const std::string& TrisAggRequest_Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrisAggRequest_Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrisAggRequest_Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrisAggRequest_Op_descriptor(), enum_t_value);
}
inline bool TrisAggRequest_Op_Parse(
    const std::string& name, TrisAggRequest_Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrisAggRequest_Op>(
    TrisAggRequest_Op_descriptor(), name, value);
}
// ===================================================================

class AggValuesPerLonRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.AggValuesPerLonRequest) */ {
 public:
  AggValuesPerLonRequest();
  virtual ~AggValuesPerLonRequest();

  AggValuesPerLonRequest(const AggValuesPerLonRequest& from);
  AggValuesPerLonRequest(AggValuesPerLonRequest&& from) noexcept
    : AggValuesPerLonRequest() {
    *this = ::std::move(from);
  }

  inline AggValuesPerLonRequest& operator=(const AggValuesPerLonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggValuesPerLonRequest& operator=(AggValuesPerLonRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggValuesPerLonRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggValuesPerLonRequest* internal_default_instance() {
    return reinterpret_cast<const AggValuesPerLonRequest*>(
               &_AggValuesPerLonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AggValuesPerLonRequest& a, AggValuesPerLonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AggValuesPerLonRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggValuesPerLonRequest* New() const final {
    return CreateMaybeMessage<AggValuesPerLonRequest>(nullptr);
  }

  AggValuesPerLonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggValuesPerLonRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggValuesPerLonRequest& from);
  void MergeFrom(const AggValuesPerLonRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggValuesPerLonRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.AggValuesPerLonRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AggValuesPerLonRequest_DOM DOM;
  static constexpr DOM DOM01 =
    AggValuesPerLonRequest_DOM_DOM01;
  static constexpr DOM DOM02 =
    AggValuesPerLonRequest_DOM_DOM02;
  static inline bool DOM_IsValid(int value) {
    return AggValuesPerLonRequest_DOM_IsValid(value);
  }
  static constexpr DOM DOM_MIN =
    AggValuesPerLonRequest_DOM_DOM_MIN;
  static constexpr DOM DOM_MAX =
    AggValuesPerLonRequest_DOM_DOM_MAX;
  static constexpr int DOM_ARRAYSIZE =
    AggValuesPerLonRequest_DOM_DOM_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DOM_descriptor() {
    return AggValuesPerLonRequest_DOM_descriptor();
  }
  template<typename T>
  static inline const std::string& DOM_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DOM>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DOM_Name.");
    return AggValuesPerLonRequest_DOM_Name(enum_t_value);
  }
  static inline bool DOM_Parse(const std::string& name,
      DOM* value) {
    return AggValuesPerLonRequest_DOM_Parse(name, value);
  }

  typedef AggValuesPerLonRequest_Op Op;
  static constexpr Op MEAN =
    AggValuesPerLonRequest_Op_MEAN;
  static constexpr Op SUM =
    AggValuesPerLonRequest_Op_SUM;
  static inline bool Op_IsValid(int value) {
    return AggValuesPerLonRequest_Op_IsValid(value);
  }
  static constexpr Op Op_MIN =
    AggValuesPerLonRequest_Op_Op_MIN;
  static constexpr Op Op_MAX =
    AggValuesPerLonRequest_Op_Op_MAX;
  static constexpr int Op_ARRAYSIZE =
    AggValuesPerLonRequest_Op_Op_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Op_descriptor() {
    return AggValuesPerLonRequest_Op_descriptor();
  }
  template<typename T>
  static inline const std::string& Op_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Op>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Op_Name.");
    return AggValuesPerLonRequest_Op_Name(enum_t_value);
  }
  static inline bool Op_Parse(const std::string& name,
      Op* value) {
    return AggValuesPerLonRequest_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kVariableFieldNumber = 2,
    kAltFieldNumber = 3,
    kDomFieldNumber = 4,
    kAggregateFunctionFieldNumber = 5,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string variable = 2;
  void clear_variable();
  const std::string& variable() const;
  void set_variable(const std::string& value);
  void set_variable(std::string&& value);
  void set_variable(const char* value);
  void set_variable(const char* value, size_t size);
  std::string* mutable_variable();
  std::string* release_variable();
  void set_allocated_variable(std::string* variable);
  private:
  const std::string& _internal_variable() const;
  void _internal_set_variable(const std::string& value);
  std::string* _internal_mutable_variable();
  public:

  // sint32 alt = 3;
  void clear_alt();
  ::PROTOBUF_NAMESPACE_ID::int32 alt() const;
  void set_alt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alt() const;
  void _internal_set_alt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .nc.AggValuesPerLonRequest.DOM dom = 4;
  void clear_dom();
  ::nc::AggValuesPerLonRequest_DOM dom() const;
  void set_dom(::nc::AggValuesPerLonRequest_DOM value);
  private:
  ::nc::AggValuesPerLonRequest_DOM _internal_dom() const;
  void _internal_set_dom(::nc::AggValuesPerLonRequest_DOM value);
  public:

  // .nc.AggValuesPerLonRequest.Op aggregateFunction = 5;
  void clear_aggregatefunction();
  ::nc::AggValuesPerLonRequest_Op aggregatefunction() const;
  void set_aggregatefunction(::nc::AggValuesPerLonRequest_Op value);
  private:
  ::nc::AggValuesPerLonRequest_Op _internal_aggregatefunction() const;
  void _internal_set_aggregatefunction(::nc::AggValuesPerLonRequest_Op value);
  public:

  // @@protoc_insertion_point(class_scope:nc.AggValuesPerLonRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_;
  ::PROTOBUF_NAMESPACE_ID::int32 alt_;
  int dom_;
  int aggregatefunction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// -------------------------------------------------------------------

class AggValuesPerLonReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.AggValuesPerLonReply) */ {
 public:
  AggValuesPerLonReply();
  virtual ~AggValuesPerLonReply();

  AggValuesPerLonReply(const AggValuesPerLonReply& from);
  AggValuesPerLonReply(AggValuesPerLonReply&& from) noexcept
    : AggValuesPerLonReply() {
    *this = ::std::move(from);
  }

  inline AggValuesPerLonReply& operator=(const AggValuesPerLonReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggValuesPerLonReply& operator=(AggValuesPerLonReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggValuesPerLonReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggValuesPerLonReply* internal_default_instance() {
    return reinterpret_cast<const AggValuesPerLonReply*>(
               &_AggValuesPerLonReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AggValuesPerLonReply& a, AggValuesPerLonReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AggValuesPerLonReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggValuesPerLonReply* New() const final {
    return CreateMaybeMessage<AggValuesPerLonReply>(nullptr);
  }

  AggValuesPerLonReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggValuesPerLonReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggValuesPerLonReply& from);
  void MergeFrom(const AggValuesPerLonReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggValuesPerLonReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.AggValuesPerLonReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:nc.AggValuesPerLonReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// -------------------------------------------------------------------

class MeshRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.MeshRequest) */ {
 public:
  MeshRequest();
  virtual ~MeshRequest();

  MeshRequest(const MeshRequest& from);
  MeshRequest(MeshRequest&& from) noexcept
    : MeshRequest() {
    *this = ::std::move(from);
  }

  inline MeshRequest& operator=(const MeshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshRequest& operator=(MeshRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshRequest* internal_default_instance() {
    return reinterpret_cast<const MeshRequest*>(
               &_MeshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MeshRequest& a, MeshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshRequest* New() const final {
    return CreateMaybeMessage<MeshRequest>(nullptr);
  }

  MeshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshRequest& from);
  void MergeFrom(const MeshRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.MeshRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:nc.MeshRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// -------------------------------------------------------------------

class MeshReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.MeshReply) */ {
 public:
  MeshReply();
  virtual ~MeshReply();

  MeshReply(const MeshReply& from);
  MeshReply(MeshReply&& from) noexcept
    : MeshReply() {
    *this = ::std::move(from);
  }

  inline MeshReply& operator=(const MeshReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshReply& operator=(MeshReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshReply* internal_default_instance() {
    return reinterpret_cast<const MeshReply*>(
               &_MeshReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MeshReply& a, MeshReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshReply* New() const final {
    return CreateMaybeMessage<MeshReply>(nullptr);
  }

  MeshReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshReply& from);
  void MergeFrom(const MeshReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.MeshReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonsFieldNumber = 1,
    kLatsFieldNumber = 2,
  };
  // repeated double lons = 1;
  int lons_size() const;
  private:
  int _internal_lons_size() const;
  public:
  void clear_lons();
  private:
  double _internal_lons(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_lons() const;
  void _internal_add_lons(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_lons();
  public:
  double lons(int index) const;
  void set_lons(int index, double value);
  void add_lons(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lons();

  // repeated double lats = 2;
  int lats_size() const;
  private:
  int _internal_lats_size() const;
  public:
  void clear_lats();
  private:
  double _internal_lats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_lats() const;
  void _internal_add_lats(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_lats();
  public:
  double lats(int index) const;
  void set_lats(int index, double value);
  void add_lats(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lats();

  // @@protoc_insertion_point(class_scope:nc.MeshReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lons_;
  mutable std::atomic<int> _lons_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lats_;
  mutable std::atomic<int> _lats_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// -------------------------------------------------------------------

class TrisRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.TrisRequest) */ {
 public:
  TrisRequest();
  virtual ~TrisRequest();

  TrisRequest(const TrisRequest& from);
  TrisRequest(TrisRequest&& from) noexcept
    : TrisRequest() {
    *this = ::std::move(from);
  }

  inline TrisRequest& operator=(const TrisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrisRequest& operator=(TrisRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrisRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrisRequest* internal_default_instance() {
    return reinterpret_cast<const TrisRequest*>(
               &_TrisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrisRequest& a, TrisRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrisRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrisRequest* New() const final {
    return CreateMaybeMessage<TrisRequest>(nullptr);
  }

  TrisRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrisRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrisRequest& from);
  void MergeFrom(const TrisRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrisRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.TrisRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kVariableFieldNumber = 2,
    kAltFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string variable = 2;
  void clear_variable();
  const std::string& variable() const;
  void set_variable(const std::string& value);
  void set_variable(std::string&& value);
  void set_variable(const char* value);
  void set_variable(const char* value, size_t size);
  std::string* mutable_variable();
  std::string* release_variable();
  void set_allocated_variable(std::string* variable);
  private:
  const std::string& _internal_variable() const;
  void _internal_set_variable(const std::string& value);
  std::string* _internal_mutable_variable();
  public:

  // sint32 alt = 3;
  void clear_alt();
  ::PROTOBUF_NAMESPACE_ID::int32 alt() const;
  void set_alt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alt() const;
  void _internal_set_alt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nc.TrisRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_;
  ::PROTOBUF_NAMESPACE_ID::int32 alt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// -------------------------------------------------------------------

class TrisReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.TrisReply) */ {
 public:
  TrisReply();
  virtual ~TrisReply();

  TrisReply(const TrisReply& from);
  TrisReply(TrisReply&& from) noexcept
    : TrisReply() {
    *this = ::std::move(from);
  }

  inline TrisReply& operator=(const TrisReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrisReply& operator=(TrisReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrisReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrisReply* internal_default_instance() {
    return reinterpret_cast<const TrisReply*>(
               &_TrisReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrisReply& a, TrisReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TrisReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrisReply* New() const final {
    return CreateMaybeMessage<TrisReply>(nullptr);
  }

  TrisReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrisReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrisReply& from);
  void MergeFrom(const TrisReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrisReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.TrisReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:nc.TrisReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// -------------------------------------------------------------------

class TrisAggRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nc.TrisAggRequest) */ {
 public:
  TrisAggRequest();
  virtual ~TrisAggRequest();

  TrisAggRequest(const TrisAggRequest& from);
  TrisAggRequest(TrisAggRequest&& from) noexcept
    : TrisAggRequest() {
    *this = ::std::move(from);
  }

  inline TrisAggRequest& operator=(const TrisAggRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrisAggRequest& operator=(TrisAggRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrisAggRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrisAggRequest* internal_default_instance() {
    return reinterpret_cast<const TrisAggRequest*>(
               &_TrisAggRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrisAggRequest& a, TrisAggRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrisAggRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrisAggRequest* New() const final {
    return CreateMaybeMessage<TrisAggRequest>(nullptr);
  }

  TrisAggRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrisAggRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrisAggRequest& from);
  void MergeFrom(const TrisAggRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrisAggRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nc.TrisAggRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nc_2eproto);
    return ::descriptor_table_nc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrisAggRequest_Op Op;
  static constexpr Op MEAN =
    TrisAggRequest_Op_MEAN;
  static constexpr Op SUM =
    TrisAggRequest_Op_SUM;
  static inline bool Op_IsValid(int value) {
    return TrisAggRequest_Op_IsValid(value);
  }
  static constexpr Op Op_MIN =
    TrisAggRequest_Op_Op_MIN;
  static constexpr Op Op_MAX =
    TrisAggRequest_Op_Op_MAX;
  static constexpr int Op_ARRAYSIZE =
    TrisAggRequest_Op_Op_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Op_descriptor() {
    return TrisAggRequest_Op_descriptor();
  }
  template<typename T>
  static inline const std::string& Op_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Op>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Op_Name.");
    return TrisAggRequest_Op_Name(enum_t_value);
  }
  static inline bool Op_Parse(const std::string& name,
      Op* value) {
    return TrisAggRequest_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kVariableFieldNumber = 2,
    kAggregateFunctionFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string variable = 2;
  void clear_variable();
  const std::string& variable() const;
  void set_variable(const std::string& value);
  void set_variable(std::string&& value);
  void set_variable(const char* value);
  void set_variable(const char* value, size_t size);
  std::string* mutable_variable();
  std::string* release_variable();
  void set_allocated_variable(std::string* variable);
  private:
  const std::string& _internal_variable() const;
  void _internal_set_variable(const std::string& value);
  std::string* _internal_mutable_variable();
  public:

  // .nc.TrisAggRequest.Op aggregateFunction = 3;
  void clear_aggregatefunction();
  ::nc::TrisAggRequest_Op aggregatefunction() const;
  void set_aggregatefunction(::nc::TrisAggRequest_Op value);
  private:
  ::nc::TrisAggRequest_Op _internal_aggregatefunction() const;
  void _internal_set_aggregatefunction(::nc::TrisAggRequest_Op value);
  public:

  // @@protoc_insertion_point(class_scope:nc.TrisAggRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_;
  int aggregatefunction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AggValuesPerLonRequest

// string filename = 1;
inline void AggValuesPerLonRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AggValuesPerLonRequest::filename() const {
  // @@protoc_insertion_point(field_get:nc.AggValuesPerLonRequest.filename)
  return _internal_filename();
}
inline void AggValuesPerLonRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:nc.AggValuesPerLonRequest.filename)
}
inline std::string* AggValuesPerLonRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:nc.AggValuesPerLonRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& AggValuesPerLonRequest::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void AggValuesPerLonRequest::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AggValuesPerLonRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.AggValuesPerLonRequest.filename)
}
inline void AggValuesPerLonRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.AggValuesPerLonRequest.filename)
}
inline void AggValuesPerLonRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.AggValuesPerLonRequest.filename)
}
inline std::string* AggValuesPerLonRequest::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AggValuesPerLonRequest::release_filename() {
  // @@protoc_insertion_point(field_release:nc.AggValuesPerLonRequest.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AggValuesPerLonRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:nc.AggValuesPerLonRequest.filename)
}

// string variable = 2;
inline void AggValuesPerLonRequest::clear_variable() {
  variable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AggValuesPerLonRequest::variable() const {
  // @@protoc_insertion_point(field_get:nc.AggValuesPerLonRequest.variable)
  return _internal_variable();
}
inline void AggValuesPerLonRequest::set_variable(const std::string& value) {
  _internal_set_variable(value);
  // @@protoc_insertion_point(field_set:nc.AggValuesPerLonRequest.variable)
}
inline std::string* AggValuesPerLonRequest::mutable_variable() {
  // @@protoc_insertion_point(field_mutable:nc.AggValuesPerLonRequest.variable)
  return _internal_mutable_variable();
}
inline const std::string& AggValuesPerLonRequest::_internal_variable() const {
  return variable_.GetNoArena();
}
inline void AggValuesPerLonRequest::_internal_set_variable(const std::string& value) {
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AggValuesPerLonRequest::set_variable(std::string&& value) {
  
  variable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.AggValuesPerLonRequest.variable)
}
inline void AggValuesPerLonRequest::set_variable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.AggValuesPerLonRequest.variable)
}
inline void AggValuesPerLonRequest::set_variable(const char* value, size_t size) {
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.AggValuesPerLonRequest.variable)
}
inline std::string* AggValuesPerLonRequest::_internal_mutable_variable() {
  
  return variable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AggValuesPerLonRequest::release_variable() {
  // @@protoc_insertion_point(field_release:nc.AggValuesPerLonRequest.variable)
  
  return variable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AggValuesPerLonRequest::set_allocated_variable(std::string* variable) {
  if (variable != nullptr) {
    
  } else {
    
  }
  variable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:nc.AggValuesPerLonRequest.variable)
}

// sint32 alt = 3;
inline void AggValuesPerLonRequest::clear_alt() {
  alt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggValuesPerLonRequest::_internal_alt() const {
  return alt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggValuesPerLonRequest::alt() const {
  // @@protoc_insertion_point(field_get:nc.AggValuesPerLonRequest.alt)
  return _internal_alt();
}
inline void AggValuesPerLonRequest::_internal_set_alt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alt_ = value;
}
inline void AggValuesPerLonRequest::set_alt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:nc.AggValuesPerLonRequest.alt)
}

// .nc.AggValuesPerLonRequest.DOM dom = 4;
inline void AggValuesPerLonRequest::clear_dom() {
  dom_ = 0;
}
inline ::nc::AggValuesPerLonRequest_DOM AggValuesPerLonRequest::_internal_dom() const {
  return static_cast< ::nc::AggValuesPerLonRequest_DOM >(dom_);
}
inline ::nc::AggValuesPerLonRequest_DOM AggValuesPerLonRequest::dom() const {
  // @@protoc_insertion_point(field_get:nc.AggValuesPerLonRequest.dom)
  return _internal_dom();
}
inline void AggValuesPerLonRequest::_internal_set_dom(::nc::AggValuesPerLonRequest_DOM value) {
  
  dom_ = value;
}
inline void AggValuesPerLonRequest::set_dom(::nc::AggValuesPerLonRequest_DOM value) {
  _internal_set_dom(value);
  // @@protoc_insertion_point(field_set:nc.AggValuesPerLonRequest.dom)
}

// .nc.AggValuesPerLonRequest.Op aggregateFunction = 5;
inline void AggValuesPerLonRequest::clear_aggregatefunction() {
  aggregatefunction_ = 0;
}
inline ::nc::AggValuesPerLonRequest_Op AggValuesPerLonRequest::_internal_aggregatefunction() const {
  return static_cast< ::nc::AggValuesPerLonRequest_Op >(aggregatefunction_);
}
inline ::nc::AggValuesPerLonRequest_Op AggValuesPerLonRequest::aggregatefunction() const {
  // @@protoc_insertion_point(field_get:nc.AggValuesPerLonRequest.aggregateFunction)
  return _internal_aggregatefunction();
}
inline void AggValuesPerLonRequest::_internal_set_aggregatefunction(::nc::AggValuesPerLonRequest_Op value) {
  
  aggregatefunction_ = value;
}
inline void AggValuesPerLonRequest::set_aggregatefunction(::nc::AggValuesPerLonRequest_Op value) {
  _internal_set_aggregatefunction(value);
  // @@protoc_insertion_point(field_set:nc.AggValuesPerLonRequest.aggregateFunction)
}

// -------------------------------------------------------------------

// AggValuesPerLonReply

// repeated float data = 1;
inline int AggValuesPerLonReply::_internal_data_size() const {
  return data_.size();
}
inline int AggValuesPerLonReply::data_size() const {
  return _internal_data_size();
}
inline void AggValuesPerLonReply::clear_data() {
  data_.Clear();
}
inline float AggValuesPerLonReply::_internal_data(int index) const {
  return data_.Get(index);
}
inline float AggValuesPerLonReply::data(int index) const {
  // @@protoc_insertion_point(field_get:nc.AggValuesPerLonReply.data)
  return _internal_data(index);
}
inline void AggValuesPerLonReply::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:nc.AggValuesPerLonReply.data)
}
inline void AggValuesPerLonReply::_internal_add_data(float value) {
  data_.Add(value);
}
inline void AggValuesPerLonReply::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:nc.AggValuesPerLonReply.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AggValuesPerLonReply::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AggValuesPerLonReply::data() const {
  // @@protoc_insertion_point(field_list:nc.AggValuesPerLonReply.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AggValuesPerLonReply::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AggValuesPerLonReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:nc.AggValuesPerLonReply.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// MeshRequest

// string filename = 1;
inline void MeshRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MeshRequest::filename() const {
  // @@protoc_insertion_point(field_get:nc.MeshRequest.filename)
  return _internal_filename();
}
inline void MeshRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:nc.MeshRequest.filename)
}
inline std::string* MeshRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:nc.MeshRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& MeshRequest::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void MeshRequest::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MeshRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.MeshRequest.filename)
}
inline void MeshRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.MeshRequest.filename)
}
inline void MeshRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.MeshRequest.filename)
}
inline std::string* MeshRequest::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeshRequest::release_filename() {
  // @@protoc_insertion_point(field_release:nc.MeshRequest.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeshRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:nc.MeshRequest.filename)
}

// -------------------------------------------------------------------

// MeshReply

// repeated double lons = 1;
inline int MeshReply::_internal_lons_size() const {
  return lons_.size();
}
inline int MeshReply::lons_size() const {
  return _internal_lons_size();
}
inline void MeshReply::clear_lons() {
  lons_.Clear();
}
inline double MeshReply::_internal_lons(int index) const {
  return lons_.Get(index);
}
inline double MeshReply::lons(int index) const {
  // @@protoc_insertion_point(field_get:nc.MeshReply.lons)
  return _internal_lons(index);
}
inline void MeshReply::set_lons(int index, double value) {
  lons_.Set(index, value);
  // @@protoc_insertion_point(field_set:nc.MeshReply.lons)
}
inline void MeshReply::_internal_add_lons(double value) {
  lons_.Add(value);
}
inline void MeshReply::add_lons(double value) {
  _internal_add_lons(value);
  // @@protoc_insertion_point(field_add:nc.MeshReply.lons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MeshReply::_internal_lons() const {
  return lons_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MeshReply::lons() const {
  // @@protoc_insertion_point(field_list:nc.MeshReply.lons)
  return _internal_lons();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MeshReply::_internal_mutable_lons() {
  return &lons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MeshReply::mutable_lons() {
  // @@protoc_insertion_point(field_mutable_list:nc.MeshReply.lons)
  return _internal_mutable_lons();
}

// repeated double lats = 2;
inline int MeshReply::_internal_lats_size() const {
  return lats_.size();
}
inline int MeshReply::lats_size() const {
  return _internal_lats_size();
}
inline void MeshReply::clear_lats() {
  lats_.Clear();
}
inline double MeshReply::_internal_lats(int index) const {
  return lats_.Get(index);
}
inline double MeshReply::lats(int index) const {
  // @@protoc_insertion_point(field_get:nc.MeshReply.lats)
  return _internal_lats(index);
}
inline void MeshReply::set_lats(int index, double value) {
  lats_.Set(index, value);
  // @@protoc_insertion_point(field_set:nc.MeshReply.lats)
}
inline void MeshReply::_internal_add_lats(double value) {
  lats_.Add(value);
}
inline void MeshReply::add_lats(double value) {
  _internal_add_lats(value);
  // @@protoc_insertion_point(field_add:nc.MeshReply.lats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MeshReply::_internal_lats() const {
  return lats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MeshReply::lats() const {
  // @@protoc_insertion_point(field_list:nc.MeshReply.lats)
  return _internal_lats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MeshReply::_internal_mutable_lats() {
  return &lats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MeshReply::mutable_lats() {
  // @@protoc_insertion_point(field_mutable_list:nc.MeshReply.lats)
  return _internal_mutable_lats();
}

// -------------------------------------------------------------------

// TrisRequest

// string filename = 1;
inline void TrisRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrisRequest::filename() const {
  // @@protoc_insertion_point(field_get:nc.TrisRequest.filename)
  return _internal_filename();
}
inline void TrisRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:nc.TrisRequest.filename)
}
inline std::string* TrisRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:nc.TrisRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& TrisRequest::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void TrisRequest::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrisRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.TrisRequest.filename)
}
inline void TrisRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.TrisRequest.filename)
}
inline void TrisRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.TrisRequest.filename)
}
inline std::string* TrisRequest::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrisRequest::release_filename() {
  // @@protoc_insertion_point(field_release:nc.TrisRequest.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrisRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:nc.TrisRequest.filename)
}

// string variable = 2;
inline void TrisRequest::clear_variable() {
  variable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrisRequest::variable() const {
  // @@protoc_insertion_point(field_get:nc.TrisRequest.variable)
  return _internal_variable();
}
inline void TrisRequest::set_variable(const std::string& value) {
  _internal_set_variable(value);
  // @@protoc_insertion_point(field_set:nc.TrisRequest.variable)
}
inline std::string* TrisRequest::mutable_variable() {
  // @@protoc_insertion_point(field_mutable:nc.TrisRequest.variable)
  return _internal_mutable_variable();
}
inline const std::string& TrisRequest::_internal_variable() const {
  return variable_.GetNoArena();
}
inline void TrisRequest::_internal_set_variable(const std::string& value) {
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrisRequest::set_variable(std::string&& value) {
  
  variable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.TrisRequest.variable)
}
inline void TrisRequest::set_variable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.TrisRequest.variable)
}
inline void TrisRequest::set_variable(const char* value, size_t size) {
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.TrisRequest.variable)
}
inline std::string* TrisRequest::_internal_mutable_variable() {
  
  return variable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrisRequest::release_variable() {
  // @@protoc_insertion_point(field_release:nc.TrisRequest.variable)
  
  return variable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrisRequest::set_allocated_variable(std::string* variable) {
  if (variable != nullptr) {
    
  } else {
    
  }
  variable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:nc.TrisRequest.variable)
}

// sint32 alt = 3;
inline void TrisRequest::clear_alt() {
  alt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrisRequest::_internal_alt() const {
  return alt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrisRequest::alt() const {
  // @@protoc_insertion_point(field_get:nc.TrisRequest.alt)
  return _internal_alt();
}
inline void TrisRequest::_internal_set_alt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alt_ = value;
}
inline void TrisRequest::set_alt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:nc.TrisRequest.alt)
}

// -------------------------------------------------------------------

// TrisReply

// repeated float data = 1;
inline int TrisReply::_internal_data_size() const {
  return data_.size();
}
inline int TrisReply::data_size() const {
  return _internal_data_size();
}
inline void TrisReply::clear_data() {
  data_.Clear();
}
inline float TrisReply::_internal_data(int index) const {
  return data_.Get(index);
}
inline float TrisReply::data(int index) const {
  // @@protoc_insertion_point(field_get:nc.TrisReply.data)
  return _internal_data(index);
}
inline void TrisReply::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:nc.TrisReply.data)
}
inline void TrisReply::_internal_add_data(float value) {
  data_.Add(value);
}
inline void TrisReply::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:nc.TrisReply.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrisReply::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrisReply::data() const {
  // @@protoc_insertion_point(field_list:nc.TrisReply.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrisReply::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrisReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:nc.TrisReply.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// TrisAggRequest

// string filename = 1;
inline void TrisAggRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrisAggRequest::filename() const {
  // @@protoc_insertion_point(field_get:nc.TrisAggRequest.filename)
  return _internal_filename();
}
inline void TrisAggRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:nc.TrisAggRequest.filename)
}
inline std::string* TrisAggRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:nc.TrisAggRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& TrisAggRequest::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void TrisAggRequest::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrisAggRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.TrisAggRequest.filename)
}
inline void TrisAggRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.TrisAggRequest.filename)
}
inline void TrisAggRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.TrisAggRequest.filename)
}
inline std::string* TrisAggRequest::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrisAggRequest::release_filename() {
  // @@protoc_insertion_point(field_release:nc.TrisAggRequest.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrisAggRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:nc.TrisAggRequest.filename)
}

// string variable = 2;
inline void TrisAggRequest::clear_variable() {
  variable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrisAggRequest::variable() const {
  // @@protoc_insertion_point(field_get:nc.TrisAggRequest.variable)
  return _internal_variable();
}
inline void TrisAggRequest::set_variable(const std::string& value) {
  _internal_set_variable(value);
  // @@protoc_insertion_point(field_set:nc.TrisAggRequest.variable)
}
inline std::string* TrisAggRequest::mutable_variable() {
  // @@protoc_insertion_point(field_mutable:nc.TrisAggRequest.variable)
  return _internal_mutable_variable();
}
inline const std::string& TrisAggRequest::_internal_variable() const {
  return variable_.GetNoArena();
}
inline void TrisAggRequest::_internal_set_variable(const std::string& value) {
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrisAggRequest::set_variable(std::string&& value) {
  
  variable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nc.TrisAggRequest.variable)
}
inline void TrisAggRequest::set_variable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nc.TrisAggRequest.variable)
}
inline void TrisAggRequest::set_variable(const char* value, size_t size) {
  
  variable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nc.TrisAggRequest.variable)
}
inline std::string* TrisAggRequest::_internal_mutable_variable() {
  
  return variable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrisAggRequest::release_variable() {
  // @@protoc_insertion_point(field_release:nc.TrisAggRequest.variable)
  
  return variable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrisAggRequest::set_allocated_variable(std::string* variable) {
  if (variable != nullptr) {
    
  } else {
    
  }
  variable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:nc.TrisAggRequest.variable)
}

// .nc.TrisAggRequest.Op aggregateFunction = 3;
inline void TrisAggRequest::clear_aggregatefunction() {
  aggregatefunction_ = 0;
}
inline ::nc::TrisAggRequest_Op TrisAggRequest::_internal_aggregatefunction() const {
  return static_cast< ::nc::TrisAggRequest_Op >(aggregatefunction_);
}
inline ::nc::TrisAggRequest_Op TrisAggRequest::aggregatefunction() const {
  // @@protoc_insertion_point(field_get:nc.TrisAggRequest.aggregateFunction)
  return _internal_aggregatefunction();
}
inline void TrisAggRequest::_internal_set_aggregatefunction(::nc::TrisAggRequest_Op value) {
  
  aggregatefunction_ = value;
}
inline void TrisAggRequest::set_aggregatefunction(::nc::TrisAggRequest_Op value) {
  _internal_set_aggregatefunction(value);
  // @@protoc_insertion_point(field_set:nc.TrisAggRequest.aggregateFunction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nc::AggValuesPerLonRequest_DOM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nc::AggValuesPerLonRequest_DOM>() {
  return ::nc::AggValuesPerLonRequest_DOM_descriptor();
}
template <> struct is_proto_enum< ::nc::AggValuesPerLonRequest_Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nc::AggValuesPerLonRequest_Op>() {
  return ::nc::AggValuesPerLonRequest_Op_descriptor();
}
template <> struct is_proto_enum< ::nc::TrisAggRequest_Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nc::TrisAggRequest_Op>() {
  return ::nc::TrisAggRequest_Op_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nc_2eproto
