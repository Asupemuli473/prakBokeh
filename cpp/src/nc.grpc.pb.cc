// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nc.proto

#include "nc.pb.h"
#include "nc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nc {

static const char* NCService_method_names[] = {
  "/nc.NCService/GetAggValuesPerLon",
  "/nc.NCService/GetMesh",
  "/nc.NCService/GetTris",
  "/nc.NCService/GetTrisAgg",
};

std::unique_ptr< NCService::Stub> NCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NCService::Stub> stub(new NCService::Stub(channel));
  return stub;
}

NCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetAggValuesPerLon_(NCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMesh_(NCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTris_(NCService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTrisAgg_(NCService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NCService::Stub::GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::nc::AggValuesPerLonReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAggValuesPerLon_, context, request, response);
}

void NCService::Stub::experimental_async::GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAggValuesPerLon_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAggValuesPerLon_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetAggValuesPerLon(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAggValuesPerLon_, context, request, response, reactor);
}

void NCService::Stub::experimental_async::GetAggValuesPerLon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::AggValuesPerLonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAggValuesPerLon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>* NCService::Stub::AsyncGetAggValuesPerLonRaw(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::AggValuesPerLonReply>::Create(channel_.get(), cq, rpcmethod_GetAggValuesPerLon_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nc::AggValuesPerLonReply>* NCService::Stub::PrepareAsyncGetAggValuesPerLonRaw(::grpc::ClientContext* context, const ::nc::AggValuesPerLonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::AggValuesPerLonReply>::Create(channel_.get(), cq, rpcmethod_GetAggValuesPerLon_, context, request, false);
}

::grpc::Status NCService::Stub::GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::nc::MeshReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMesh_, context, request, response);
}

void NCService::Stub::experimental_async::GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMesh_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMesh_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetMesh(::grpc::ClientContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMesh_, context, request, response, reactor);
}

void NCService::Stub::experimental_async::GetMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::MeshReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMesh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nc::MeshReply>* NCService::Stub::AsyncGetMeshRaw(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::MeshReply>::Create(channel_.get(), cq, rpcmethod_GetMesh_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nc::MeshReply>* NCService::Stub::PrepareAsyncGetMeshRaw(::grpc::ClientContext* context, const ::nc::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::MeshReply>::Create(channel_.get(), cq, rpcmethod_GetMesh_, context, request, false);
}

::grpc::Status NCService::Stub::GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::nc::TrisReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTris_, context, request, response);
}

void NCService::Stub::experimental_async::GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTris_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTris_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetTris(::grpc::ClientContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTris_, context, request, response, reactor);
}

void NCService::Stub::experimental_async::GetTris(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTris_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* NCService::Stub::AsyncGetTrisRaw(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::TrisReply>::Create(channel_.get(), cq, rpcmethod_GetTris_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* NCService::Stub::PrepareAsyncGetTrisRaw(::grpc::ClientContext* context, const ::nc::TrisRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::TrisReply>::Create(channel_.get(), cq, rpcmethod_GetTris_, context, request, false);
}

::grpc::Status NCService::Stub::GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::nc::TrisReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTrisAgg_, context, request, response);
}

void NCService::Stub::experimental_async::GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTrisAgg_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTrisAgg_, context, request, response, std::move(f));
}

void NCService::Stub::experimental_async::GetTrisAgg(::grpc::ClientContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTrisAgg_, context, request, response, reactor);
}

void NCService::Stub::experimental_async::GetTrisAgg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::nc::TrisReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTrisAgg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* NCService::Stub::AsyncGetTrisAggRaw(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::TrisReply>::Create(channel_.get(), cq, rpcmethod_GetTrisAgg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nc::TrisReply>* NCService::Stub::PrepareAsyncGetTrisAggRaw(::grpc::ClientContext* context, const ::nc::TrisAggRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::nc::TrisReply>::Create(channel_.get(), cq, rpcmethod_GetTrisAgg_, context, request, false);
}

NCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NCService::Service, ::nc::AggValuesPerLonRequest, ::nc::AggValuesPerLonReply>(
          std::mem_fn(&NCService::Service::GetAggValuesPerLon), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NCService::Service, ::nc::MeshRequest, ::nc::MeshReply>(
          std::mem_fn(&NCService::Service::GetMesh), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NCService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NCService::Service, ::nc::TrisRequest, ::nc::TrisReply>(
          std::mem_fn(&NCService::Service::GetTris), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NCService::Service, ::nc::TrisAggRequest, ::nc::TrisReply>(
          std::mem_fn(&NCService::Service::GetTrisAgg), this)));
}

NCService::Service::~Service() {
}

::grpc::Status NCService::Service::GetAggValuesPerLon(::grpc::ServerContext* context, const ::nc::AggValuesPerLonRequest* request, ::nc::AggValuesPerLonReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NCService::Service::GetMesh(::grpc::ServerContext* context, const ::nc::MeshRequest* request, ::nc::MeshReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NCService::Service::GetTris(::grpc::ServerContext* context, const ::nc::TrisRequest* request, ::nc::TrisReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NCService::Service::GetTrisAgg(::grpc::ServerContext* context, const ::nc::TrisAggRequest* request, ::nc::TrisReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nc

