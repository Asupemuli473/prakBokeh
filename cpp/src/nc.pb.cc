// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nc.proto

#include "nc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace nc {
class AggValuesPerLonRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggValuesPerLonRequest> _instance;
} _AggValuesPerLonRequest_default_instance_;
class AggValuesPerLonReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggValuesPerLonReply> _instance;
} _AggValuesPerLonReply_default_instance_;
class MeshRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshRequest> _instance;
} _MeshRequest_default_instance_;
class MeshReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshReply> _instance;
} _MeshReply_default_instance_;
class TrisRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrisRequest> _instance;
} _TrisRequest_default_instance_;
class TrisReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrisReply> _instance;
} _TrisReply_default_instance_;
class TrisAggRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrisAggRequest> _instance;
} _TrisAggRequest_default_instance_;
}  // namespace nc
static void InitDefaultsscc_info_AggValuesPerLonReply_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_AggValuesPerLonReply_default_instance_;
    new (ptr) ::nc::AggValuesPerLonReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::AggValuesPerLonReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AggValuesPerLonReply_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AggValuesPerLonReply_nc_2eproto}, {}};

static void InitDefaultsscc_info_AggValuesPerLonRequest_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_AggValuesPerLonRequest_default_instance_;
    new (ptr) ::nc::AggValuesPerLonRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::AggValuesPerLonRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AggValuesPerLonRequest_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AggValuesPerLonRequest_nc_2eproto}, {}};

static void InitDefaultsscc_info_MeshReply_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_MeshReply_default_instance_;
    new (ptr) ::nc::MeshReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::MeshReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshReply_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeshReply_nc_2eproto}, {}};

static void InitDefaultsscc_info_MeshRequest_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_MeshRequest_default_instance_;
    new (ptr) ::nc::MeshRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::MeshRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshRequest_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeshRequest_nc_2eproto}, {}};

static void InitDefaultsscc_info_TrisAggRequest_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_TrisAggRequest_default_instance_;
    new (ptr) ::nc::TrisAggRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::TrisAggRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrisAggRequest_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrisAggRequest_nc_2eproto}, {}};

static void InitDefaultsscc_info_TrisReply_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_TrisReply_default_instance_;
    new (ptr) ::nc::TrisReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::TrisReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrisReply_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrisReply_nc_2eproto}, {}};

static void InitDefaultsscc_info_TrisRequest_nc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nc::_TrisRequest_default_instance_;
    new (ptr) ::nc::TrisRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nc::TrisRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrisRequest_nc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrisRequest_nc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nc_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nc_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonRequest, variable_),
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonRequest, alt_),
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonRequest, dom_),
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonRequest, aggregatefunction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::AggValuesPerLonReply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::MeshRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::MeshRequest, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::MeshReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::MeshReply, lons_),
  PROTOBUF_FIELD_OFFSET(::nc::MeshReply, lats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::TrisRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::TrisRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::nc::TrisRequest, variable_),
  PROTOBUF_FIELD_OFFSET(::nc::TrisRequest, alt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::TrisReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::TrisReply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nc::TrisAggRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nc::TrisAggRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::nc::TrisAggRequest, variable_),
  PROTOBUF_FIELD_OFFSET(::nc::TrisAggRequest, aggregatefunction_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nc::AggValuesPerLonRequest)},
  { 10, -1, sizeof(::nc::AggValuesPerLonReply)},
  { 16, -1, sizeof(::nc::MeshRequest)},
  { 22, -1, sizeof(::nc::MeshReply)},
  { 29, -1, sizeof(::nc::TrisRequest)},
  { 37, -1, sizeof(::nc::TrisReply)},
  { 43, -1, sizeof(::nc::TrisAggRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_AggValuesPerLonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_AggValuesPerLonReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_MeshRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_MeshReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_TrisRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_TrisReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nc::_TrisAggRequest_default_instance_),
};

const char descriptor_table_protodef_nc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010nc.proto\022\002nc\"\346\001\n\026AggValuesPerLonReques"
  "t\022\020\n\010filename\030\001 \001(\t\022\020\n\010variable\030\002 \001(\t\022\013\n"
  "\003alt\030\003 \001(\021\022+\n\003dom\030\004 \001(\0162\036.nc.AggValuesPe"
  "rLonRequest.DOM\0228\n\021aggregateFunction\030\005 \001"
  "(\0162\035.nc.AggValuesPerLonRequest.Op\"\033\n\003DOM"
  "\022\t\n\005DOM01\020\000\022\t\n\005DOM02\020\001\"\027\n\002Op\022\010\n\004MEAN\020\000\022\007"
  "\n\003SUM\020\001\"$\n\024AggValuesPerLonReply\022\014\n\004data\030"
  "\001 \003(\002\"\037\n\013MeshRequest\022\020\n\010filename\030\001 \001(\t\"\'"
  "\n\tMeshReply\022\014\n\004lons\030\001 \003(\001\022\014\n\004lats\030\002 \003(\001\""
  ">\n\013TrisRequest\022\020\n\010filename\030\001 \001(\t\022\020\n\010vari"
  "able\030\002 \001(\t\022\013\n\003alt\030\003 \001(\021\"\031\n\tTrisReply\022\014\n\004"
  "data\030\001 \003(\002\"\177\n\016TrisAggRequest\022\020\n\010filename"
  "\030\001 \001(\t\022\020\n\010variable\030\002 \001(\t\0220\n\021aggregateFun"
  "ction\030\003 \001(\0162\025.nc.TrisAggRequest.Op\"\027\n\002Op"
  "\022\010\n\004MEAN\020\000\022\007\n\003SUM\020\0012\346\001\n\tNCService\022L\n\022Get"
  "AggValuesPerLon\022\032.nc.AggValuesPerLonRequ"
  "est\032\030.nc.AggValuesPerLonReply\"\000\022+\n\007GetMe"
  "sh\022\017.nc.MeshRequest\032\r.nc.MeshReply\"\000\022+\n\007"
  "GetTris\022\017.nc.TrisRequest\032\r.nc.TrisReply\""
  "\000\0221\n\nGetTrisAgg\022\022.nc.TrisAggRequest\032\r.nc"
  ".TrisReply\"\000B\031\n\007grpc.ncB\007NCProtoP\001\242\002\002NCb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nc_2eproto_sccs[7] = {
  &scc_info_AggValuesPerLonReply_nc_2eproto.base,
  &scc_info_AggValuesPerLonRequest_nc_2eproto.base,
  &scc_info_MeshReply_nc_2eproto.base,
  &scc_info_MeshRequest_nc_2eproto.base,
  &scc_info_TrisAggRequest_nc_2eproto.base,
  &scc_info_TrisReply_nc_2eproto.base,
  &scc_info_TrisRequest_nc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nc_2eproto_once;
static bool descriptor_table_nc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nc_2eproto = {
  &descriptor_table_nc_2eproto_initialized, descriptor_table_protodef_nc_2eproto, "nc.proto", 847,
  &descriptor_table_nc_2eproto_once, descriptor_table_nc_2eproto_sccs, descriptor_table_nc_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_nc_2eproto::offsets,
  file_level_metadata_nc_2eproto, 7, file_level_enum_descriptors_nc_2eproto, file_level_service_descriptors_nc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nc_2eproto), true);
namespace nc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggValuesPerLonRequest_DOM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nc_2eproto);
  return file_level_enum_descriptors_nc_2eproto[0];
}
bool AggValuesPerLonRequest_DOM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AggValuesPerLonRequest_DOM AggValuesPerLonRequest::DOM01;
constexpr AggValuesPerLonRequest_DOM AggValuesPerLonRequest::DOM02;
constexpr AggValuesPerLonRequest_DOM AggValuesPerLonRequest::DOM_MIN;
constexpr AggValuesPerLonRequest_DOM AggValuesPerLonRequest::DOM_MAX;
constexpr int AggValuesPerLonRequest::DOM_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggValuesPerLonRequest_Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nc_2eproto);
  return file_level_enum_descriptors_nc_2eproto[1];
}
bool AggValuesPerLonRequest_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AggValuesPerLonRequest_Op AggValuesPerLonRequest::MEAN;
constexpr AggValuesPerLonRequest_Op AggValuesPerLonRequest::SUM;
constexpr AggValuesPerLonRequest_Op AggValuesPerLonRequest::Op_MIN;
constexpr AggValuesPerLonRequest_Op AggValuesPerLonRequest::Op_MAX;
constexpr int AggValuesPerLonRequest::Op_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrisAggRequest_Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nc_2eproto);
  return file_level_enum_descriptors_nc_2eproto[2];
}
bool TrisAggRequest_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrisAggRequest_Op TrisAggRequest::MEAN;
constexpr TrisAggRequest_Op TrisAggRequest::SUM;
constexpr TrisAggRequest_Op TrisAggRequest::Op_MIN;
constexpr TrisAggRequest_Op TrisAggRequest::Op_MAX;
constexpr int TrisAggRequest::Op_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AggValuesPerLonRequest::InitAsDefaultInstance() {
}
class AggValuesPerLonRequest::_Internal {
 public:
};

AggValuesPerLonRequest::AggValuesPerLonRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.AggValuesPerLonRequest)
}
AggValuesPerLonRequest::AggValuesPerLonRequest(const AggValuesPerLonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable().empty()) {
    variable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  ::memcpy(&alt_, &from.alt_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregatefunction_) -
    reinterpret_cast<char*>(&alt_)) + sizeof(aggregatefunction_));
  // @@protoc_insertion_point(copy_constructor:nc.AggValuesPerLonRequest)
}

void AggValuesPerLonRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggValuesPerLonRequest_nc_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&alt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregatefunction_) -
      reinterpret_cast<char*>(&alt_)) + sizeof(aggregatefunction_));
}

AggValuesPerLonRequest::~AggValuesPerLonRequest() {
  // @@protoc_insertion_point(destructor:nc.AggValuesPerLonRequest)
  SharedDtor();
}

void AggValuesPerLonRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AggValuesPerLonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggValuesPerLonRequest& AggValuesPerLonRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggValuesPerLonRequest_nc_2eproto.base);
  return *internal_default_instance();
}


void AggValuesPerLonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.AggValuesPerLonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&alt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregatefunction_) -
      reinterpret_cast<char*>(&alt_)) + sizeof(aggregatefunction_));
  _internal_metadata_.Clear();
}

const char* AggValuesPerLonRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.AggValuesPerLonRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.AggValuesPerLonRequest.variable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nc.AggValuesPerLonRequest.DOM dom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_dom(static_cast<::nc::AggValuesPerLonRequest_DOM>(val));
        } else goto handle_unusual;
        continue;
      // .nc.AggValuesPerLonRequest.Op aggregateFunction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_aggregatefunction(static_cast<::nc::AggValuesPerLonRequest_Op>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggValuesPerLonRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.AggValuesPerLonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.AggValuesPerLonRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.AggValuesPerLonRequest.variable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variable(), target);
  }

  // sint32 alt = 3;
  if (this->alt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_alt(), target);
  }

  // .nc.AggValuesPerLonRequest.DOM dom = 4;
  if (this->dom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dom(), target);
  }

  // .nc.AggValuesPerLonRequest.Op aggregateFunction = 5;
  if (this->aggregatefunction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_aggregatefunction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.AggValuesPerLonRequest)
  return target;
}

size_t AggValuesPerLonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.AggValuesPerLonRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  // sint32 alt = 3;
  if (this->alt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_alt());
  }

  // .nc.AggValuesPerLonRequest.DOM dom = 4;
  if (this->dom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dom());
  }

  // .nc.AggValuesPerLonRequest.Op aggregateFunction = 5;
  if (this->aggregatefunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregatefunction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggValuesPerLonRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.AggValuesPerLonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AggValuesPerLonRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggValuesPerLonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.AggValuesPerLonRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.AggValuesPerLonRequest)
    MergeFrom(*source);
  }
}

void AggValuesPerLonRequest::MergeFrom(const AggValuesPerLonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.AggValuesPerLonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.alt() != 0) {
    _internal_set_alt(from._internal_alt());
  }
  if (from.dom() != 0) {
    _internal_set_dom(from._internal_dom());
  }
  if (from.aggregatefunction() != 0) {
    _internal_set_aggregatefunction(from._internal_aggregatefunction());
  }
}

void AggValuesPerLonRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.AggValuesPerLonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggValuesPerLonRequest::CopyFrom(const AggValuesPerLonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.AggValuesPerLonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggValuesPerLonRequest::IsInitialized() const {
  return true;
}

void AggValuesPerLonRequest::InternalSwap(AggValuesPerLonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variable_.Swap(&other->variable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(alt_, other->alt_);
  swap(dom_, other->dom_);
  swap(aggregatefunction_, other->aggregatefunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggValuesPerLonRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggValuesPerLonReply::InitAsDefaultInstance() {
}
class AggValuesPerLonReply::_Internal {
 public:
};

AggValuesPerLonReply::AggValuesPerLonReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.AggValuesPerLonReply)
}
AggValuesPerLonReply::AggValuesPerLonReply(const AggValuesPerLonReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nc.AggValuesPerLonReply)
}

void AggValuesPerLonReply::SharedCtor() {
}

AggValuesPerLonReply::~AggValuesPerLonReply() {
  // @@protoc_insertion_point(destructor:nc.AggValuesPerLonReply)
  SharedDtor();
}

void AggValuesPerLonReply::SharedDtor() {
}

void AggValuesPerLonReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggValuesPerLonReply& AggValuesPerLonReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggValuesPerLonReply_nc_2eproto.base);
  return *internal_default_instance();
}


void AggValuesPerLonReply::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.AggValuesPerLonReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

const char* AggValuesPerLonReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggValuesPerLonReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.AggValuesPerLonReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.AggValuesPerLonReply)
  return target;
}

size_t AggValuesPerLonReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.AggValuesPerLonReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggValuesPerLonReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.AggValuesPerLonReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AggValuesPerLonReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggValuesPerLonReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.AggValuesPerLonReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.AggValuesPerLonReply)
    MergeFrom(*source);
  }
}

void AggValuesPerLonReply::MergeFrom(const AggValuesPerLonReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.AggValuesPerLonReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void AggValuesPerLonReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.AggValuesPerLonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggValuesPerLonReply::CopyFrom(const AggValuesPerLonReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.AggValuesPerLonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggValuesPerLonReply::IsInitialized() const {
  return true;
}

void AggValuesPerLonReply::InternalSwap(AggValuesPerLonReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggValuesPerLonReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshRequest::InitAsDefaultInstance() {
}
class MeshRequest::_Internal {
 public:
};

MeshRequest::MeshRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.MeshRequest)
}
MeshRequest::MeshRequest(const MeshRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:nc.MeshRequest)
}

void MeshRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshRequest_nc_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MeshRequest::~MeshRequest() {
  // @@protoc_insertion_point(destructor:nc.MeshRequest)
  SharedDtor();
}

void MeshRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshRequest& MeshRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshRequest_nc_2eproto.base);
  return *internal_default_instance();
}


void MeshRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.MeshRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MeshRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.MeshRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.MeshRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.MeshRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.MeshRequest)
  return target;
}

size_t MeshRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.MeshRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.MeshRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.MeshRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.MeshRequest)
    MergeFrom(*source);
  }
}

void MeshRequest::MergeFrom(const MeshRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.MeshRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void MeshRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.MeshRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshRequest::CopyFrom(const MeshRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.MeshRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshRequest::IsInitialized() const {
  return true;
}

void MeshRequest::InternalSwap(MeshRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshReply::InitAsDefaultInstance() {
}
class MeshReply::_Internal {
 public:
};

MeshReply::MeshReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.MeshReply)
}
MeshReply::MeshReply(const MeshReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lons_(from.lons_),
      lats_(from.lats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nc.MeshReply)
}

void MeshReply::SharedCtor() {
}

MeshReply::~MeshReply() {
  // @@protoc_insertion_point(destructor:nc.MeshReply)
  SharedDtor();
}

void MeshReply::SharedDtor() {
}

void MeshReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshReply& MeshReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshReply_nc_2eproto.base);
  return *internal_default_instance();
}


void MeshReply::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.MeshReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lons_.Clear();
  lats_.Clear();
  _internal_metadata_.Clear();
}

const char* MeshReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double lons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_lons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_lons(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double lats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_lats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_lats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.MeshReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double lons = 1;
  if (this->_internal_lons_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_lons(), target);
  }

  // repeated double lats = 2;
  if (this->_internal_lats_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_lats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.MeshReply)
  return target;
}

size_t MeshReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.MeshReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double lons = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lons_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double lats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lats_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.MeshReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.MeshReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.MeshReply)
    MergeFrom(*source);
  }
}

void MeshReply::MergeFrom(const MeshReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.MeshReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lons_.MergeFrom(from.lons_);
  lats_.MergeFrom(from.lats_);
}

void MeshReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.MeshReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshReply::CopyFrom(const MeshReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.MeshReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshReply::IsInitialized() const {
  return true;
}

void MeshReply::InternalSwap(MeshReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lons_.InternalSwap(&other->lons_);
  lats_.InternalSwap(&other->lats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrisRequest::InitAsDefaultInstance() {
}
class TrisRequest::_Internal {
 public:
};

TrisRequest::TrisRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.TrisRequest)
}
TrisRequest::TrisRequest(const TrisRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable().empty()) {
    variable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  alt_ = from.alt_;
  // @@protoc_insertion_point(copy_constructor:nc.TrisRequest)
}

void TrisRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrisRequest_nc_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_ = 0;
}

TrisRequest::~TrisRequest() {
  // @@protoc_insertion_point(destructor:nc.TrisRequest)
  SharedDtor();
}

void TrisRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrisRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrisRequest& TrisRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrisRequest_nc_2eproto.base);
  return *internal_default_instance();
}


void TrisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.TrisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_ = 0;
  _internal_metadata_.Clear();
}

const char* TrisRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.TrisRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.TrisRequest.variable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrisRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.TrisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.TrisRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.TrisRequest.variable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variable(), target);
  }

  // sint32 alt = 3;
  if (this->alt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_alt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.TrisRequest)
  return target;
}

size_t TrisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.TrisRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  // sint32 alt = 3;
  if (this->alt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_alt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrisRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.TrisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TrisRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrisRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.TrisRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.TrisRequest)
    MergeFrom(*source);
  }
}

void TrisRequest::MergeFrom(const TrisRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.TrisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.alt() != 0) {
    _internal_set_alt(from._internal_alt());
  }
}

void TrisRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.TrisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrisRequest::CopyFrom(const TrisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.TrisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrisRequest::IsInitialized() const {
  return true;
}

void TrisRequest::InternalSwap(TrisRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variable_.Swap(&other->variable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(alt_, other->alt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrisRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrisReply::InitAsDefaultInstance() {
}
class TrisReply::_Internal {
 public:
};

TrisReply::TrisReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.TrisReply)
}
TrisReply::TrisReply(const TrisReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nc.TrisReply)
}

void TrisReply::SharedCtor() {
}

TrisReply::~TrisReply() {
  // @@protoc_insertion_point(destructor:nc.TrisReply)
  SharedDtor();
}

void TrisReply::SharedDtor() {
}

void TrisReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrisReply& TrisReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrisReply_nc_2eproto.base);
  return *internal_default_instance();
}


void TrisReply::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.TrisReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

const char* TrisReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrisReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.TrisReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.TrisReply)
  return target;
}

size_t TrisReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.TrisReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrisReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.TrisReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TrisReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrisReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.TrisReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.TrisReply)
    MergeFrom(*source);
  }
}

void TrisReply::MergeFrom(const TrisReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.TrisReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TrisReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.TrisReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrisReply::CopyFrom(const TrisReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.TrisReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrisReply::IsInitialized() const {
  return true;
}

void TrisReply::InternalSwap(TrisReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrisReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrisAggRequest::InitAsDefaultInstance() {
}
class TrisAggRequest::_Internal {
 public:
};

TrisAggRequest::TrisAggRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nc.TrisAggRequest)
}
TrisAggRequest::TrisAggRequest(const TrisAggRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_variable().empty()) {
    variable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  aggregatefunction_ = from.aggregatefunction_;
  // @@protoc_insertion_point(copy_constructor:nc.TrisAggRequest)
}

void TrisAggRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrisAggRequest_nc_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aggregatefunction_ = 0;
}

TrisAggRequest::~TrisAggRequest() {
  // @@protoc_insertion_point(destructor:nc.TrisAggRequest)
  SharedDtor();
}

void TrisAggRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrisAggRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrisAggRequest& TrisAggRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrisAggRequest_nc_2eproto.base);
  return *internal_default_instance();
}


void TrisAggRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nc.TrisAggRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aggregatefunction_ = 0;
  _internal_metadata_.Clear();
}

const char* TrisAggRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.TrisAggRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string variable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_variable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "nc.TrisAggRequest.variable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nc.TrisAggRequest.Op aggregateFunction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_aggregatefunction(static_cast<::nc::TrisAggRequest_Op>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrisAggRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nc.TrisAggRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.TrisAggRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable().data(), static_cast<int>(this->_internal_variable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nc.TrisAggRequest.variable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variable(), target);
  }

  // .nc.TrisAggRequest.Op aggregateFunction = 3;
  if (this->aggregatefunction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggregatefunction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nc.TrisAggRequest)
  return target;
}

size_t TrisAggRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nc.TrisAggRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string variable = 2;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable());
  }

  // .nc.TrisAggRequest.Op aggregateFunction = 3;
  if (this->aggregatefunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregatefunction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrisAggRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nc.TrisAggRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TrisAggRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrisAggRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nc.TrisAggRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nc.TrisAggRequest)
    MergeFrom(*source);
  }
}

void TrisAggRequest::MergeFrom(const TrisAggRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nc.TrisAggRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.aggregatefunction() != 0) {
    _internal_set_aggregatefunction(from._internal_aggregatefunction());
  }
}

void TrisAggRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nc.TrisAggRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrisAggRequest::CopyFrom(const TrisAggRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nc.TrisAggRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrisAggRequest::IsInitialized() const {
  return true;
}

void TrisAggRequest::InternalSwap(TrisAggRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  variable_.Swap(&other->variable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(aggregatefunction_, other->aggregatefunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrisAggRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nc::AggValuesPerLonRequest* Arena::CreateMaybeMessage< ::nc::AggValuesPerLonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nc::AggValuesPerLonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nc::AggValuesPerLonReply* Arena::CreateMaybeMessage< ::nc::AggValuesPerLonReply >(Arena* arena) {
  return Arena::CreateInternal< ::nc::AggValuesPerLonReply >(arena);
}
template<> PROTOBUF_NOINLINE ::nc::MeshRequest* Arena::CreateMaybeMessage< ::nc::MeshRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nc::MeshRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nc::MeshReply* Arena::CreateMaybeMessage< ::nc::MeshReply >(Arena* arena) {
  return Arena::CreateInternal< ::nc::MeshReply >(arena);
}
template<> PROTOBUF_NOINLINE ::nc::TrisRequest* Arena::CreateMaybeMessage< ::nc::TrisRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nc::TrisRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nc::TrisReply* Arena::CreateMaybeMessage< ::nc::TrisReply >(Arena* arena) {
  return Arena::CreateInternal< ::nc::TrisReply >(arena);
}
template<> PROTOBUF_NOINLINE ::nc::TrisAggRequest* Arena::CreateMaybeMessage< ::nc::TrisAggRequest >(Arena* arena) {
  return Arena::CreateInternal< ::nc::TrisAggRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
